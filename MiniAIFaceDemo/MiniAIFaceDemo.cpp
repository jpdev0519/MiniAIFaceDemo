
// MiniAIFaceDemo.cpp : Defines the class of the application。
//

#include "stdafx.h"
#include "MiniAIFaceDemo.h"
#include "MiniAIFaceDemoDlg.h"

#ifdef _DEBUG
#define new DEBUG_NEW
#endif


// CMiniAIFaceDemoApp

BEGIN_MESSAGE_MAP(CMiniAIFaceDemoApp, CWinApp)
	ON_COMMAND(ID_HELP, &CWinApp::OnHelp)
END_MESSAGE_MAP()


// CMiniAIFaceDemoApp structure

CMiniAIFaceDemoApp::CMiniAIFaceDemoApp()
{
	// Support restart manager
	m_dwRestartManagerSupportFlags = AFX_RESTART_MANAGER_SUPPORT_RESTART;

	// TODO:  Add construction code here，
	// Put all important initialization in InitInstance
}


// The only CMiniAIFaceDemoApp object

CMiniAIFaceDemoApp theApp;


// CMiniAIFaceDemoApp Initialize

BOOL CMiniAIFaceDemoApp::InitInstance()
{
	// If an application manifest running on Windows XP specifies to
	// Use ComCtl32.dll version 6 or later to enable visualization mode，
	//InitCommonControlsEx() is required. Otherwise, the window cannot be created。
	INITCOMMONCONTROLSEX InitCtrls;
	InitCtrls.dwSize = sizeof(InitCtrls);

	InitCtrls.dwICC = ICC_WIN95_CLASSES;
	InitCommonControlsEx(&InitCtrls);

	CWinApp::InitInstance();

	// Startup GDI+
	Gdiplus::GdiplusStartupInput gdiplusStartupInput;
	Gdiplus::GdiplusStartup(&m_gdiplusToken, &gdiplusStartupInput, NULL);


	AfxEnableControlContainer();

	// Create a shell manager in case the dialog contains
	// Any shell tree view control or shell list view control。
	CShellManager *pShellManager = new CShellManager;

	// Activate the "Windows Native" visual manager to enable theming in MFC controls
	CMFCVisualManager::SetDefaultManager(RUNTIME_CLASS(CMFCVisualManagerWindows));

	// standard initialization
	// If you are not using these features and want to reduce
	// size of the final executable, the following should be removed
	// specific initialization routines not needed
	// change the registry key used to store the settings
	// TODO: This string should be modified appropriately,
	// For example, change to company or organization name
	SetRegistryKey(_T("Native applications generated by the AppWizard"));

	CMiniAIFaceDemoDlg dlg;
	m_pMainWnd = &dlg;
	INT_PTR nResponse = dlg.DoModal();
	if (nResponse == IDOK)
	{
		// TODO: Put here when to use
		// "OK" to close the dialog code
	}
	else if (nResponse == IDCANCEL)
	{
		// TODO: Put here when to use
		// "Cancel" code to close the dialog
	}
      

	// Delete the shell manager created above.
	if (pShellManager != NULL)
	{
		delete pShellManager;
	}

	// Since the dialog is closed, FALSE will be returned to exit the application,
	// Instead of starting the application's message pump.
	return FALSE;
}



int CMiniAIFaceDemoApp::ExitInstance()
{
	// TODO:  在此添加专用代码和/或调用基类

	Gdiplus::GdiplusShutdown(m_gdiplusToken);	//关闭GDI+

	return CWinApp::ExitInstance();
}

